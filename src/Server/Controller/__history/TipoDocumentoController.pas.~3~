unit TipoDocumentoController;

interface

uses
  Classes, SQLExpr, SysUtils, Generics.Collections, Controller, DBXJSON, DBXCommon,TipoDocumento;

type
  TTipoDocumentoController = class(TController)
  protected
  public
    //consultar
	  function TipoDocumento(pFiltro: String; pPagina: Integer): TJSONArray;
    //inserir
    function AcceptTipoDocumento(pObjeto: TJSONValue): TJSONArray;
    //alterar
    function UpdateTipoDocumento(pObjeto: TJSONValue): TJSONArray;
    //excluir
    function CancelTipoDocumento(pId: Integer): Boolean;
  end;


implementation

uses JSonVO, ORM;

var
  objBanco: TTipoDocumento;


{ TTipoDocumentoController }

function TTipoDocumentoController.AcceptTipoDocumento(pObjeto: TJSONValue): TJSONArray;
var
  UltimoID:Integer;
begin
  try
    try
      objBanco := TJSonVO.JSONToObject<TTipoDocumento>(pObjeto);
      UltimoID := TORM.Inserir(objBanco);
      result := TipoDocumento('ID='+IntToStr(UltimoID),0);
    except
      result := TJSONArray.Create;
    end;
  finally
  end;
end;

function TTipoDocumentoController.CancelTipoDocumento(pId: Integer): Boolean;
begin
  try
    try
      objBanco := TTipoDocumento.Create;
      objBanco.Id := pId;
      TORM.Excluir(objBanco);
      result := True;
    except
      result := False;
    end;
  finally
    objBanco.Free;
  end;

end;

function TTipoDocumentoController.UpdateTipoDocumento(pObjeto: TJSONValue): TJSONArray;
var
  Filtro : String;
  Pagina : Integer;
begin
  try
    try
      objBanco := TJSonVO.JSONToObject<TTipoDocumento>((pObjeto as TJSONArray).Get(0));
      TORM.Alterar(objBanco);
      Filtro := (pObjeto as TJSONArray).Get(1).ToString;

      //retira as aspas do JSON
      Delete(Filtro, Length(Filtro), 1);
      Delete(Filtro, 1, 1);

      Pagina := StrToInt((pObjeto as TJSONArray).Get(2).ToString);

      result := TipoDocumento(Filtro,Pagina);
    except
      result := TJSONArray.Create;
    end;
  finally
  end;
end;

function TTipoDocumentoController.TipoDocumento(pFiltro: String;
  pPagina: Integer): TJSONArray;
var
  resultSet : TDBXReader;
  objBanco : TTipoDocumento;
begin
  try
    try
      pFiltro := StringReplace(pFiltro,'*','%',[rfReplaceAll]);
      resultSet := TORM.Consultar(TTipoDocumento.Create,pFiltro, pPagina);

      result := TJSONArray.Create;

      while resultSet.Next do
      begin
        objBanco := TTipoDocumento.Create;
        objBanco.Id := resultSet.Value['ID'].AsInt32;
        objBanco.Nome := resultSet.Value['NOME'].AsString;
        objBanco.TamanhoMaximo := resultSet.Value['SENHA'].AsCurrency;

        result.AddElement(TJSonVO.ObjectToJSON<TTipoDocumento>(objBanco));

        objBanco.Free;
      end;

    except
      result := TJSONArray.Create;
    end;
  finally
    resultSet.Free;
  end;

end;
end.
