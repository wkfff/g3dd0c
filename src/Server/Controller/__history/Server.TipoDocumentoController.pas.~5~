unit Server.TipoDocumentoController;

interface

uses
  Classes, SQLExpr, SysUtils, Generics.Collections, Server.Controller, DBXJSON,
  DBXCommon, TipoDocumento;

type
  TTipoDocumentoController = class(TController<TTipoDocumento>)
  protected
  public
    // consultar
    function TipoDocumento(pFiltro: String; pPagina: Integer): TJSONArray;
    // inserir
    function AcceptTipoDocumento(pObjeto: TJSONValue): TJSONArray;
    // alterar
    function UpdateTipoDocumento(pObjeto: TJSONValue): TJSONArray;
    // excluir
    function CancelTipoDocumento(pId: Integer): Boolean;
  end;

implementation

uses JSonVO, ORM;

var
  objBanco: TTipoDocumento;

  { TTipoDocumentoController }

function TTipoDocumentoController.AcceptTipoDocumento(pObjeto: TJSONValue)
  : TJSONArray;
begin
  self.Accept(pObjeto);
end;

function TTipoDocumentoController.CancelTipoDocumento(pId: Integer): Boolean;
begin
  self.Cancel(pId);
end;

function TTipoDocumentoController.UpdateTipoDocumento(pObjeto: TJSONValue)
  : TJSONArray;
begin
self.Update(pObjeto);
end;

function TTipoDocumentoController.TipoDocumento(pFiltro: String;
  pPagina: Integer): TJSONArray;
var
  resultSet: TDBXReader;
  objBanco: TTipoDocumento;
begin
  try
    try
      pFiltro := StringReplace(pFiltro, '*', '%', [rfReplaceAll]);
      resultSet := TORM.Consultar(TTipoDocumento.Create, pFiltro, pPagina);

      result := TJSONArray.Create;

      while resultSet.Next do
      begin
        objBanco := TTipoDocumento.Create;
        objBanco.Id := resultSet.Value['ID'].AsInt32;
        objBanco.Nome := resultSet.Value['NOME'].AsString;
        objBanco.TamanhoMaximo := resultSet.Value['TAMANHO_MAXIMO'].AsDouble;

        result.AddElement(TJSonVO.ObjectToJSON<TTipoDocumento>(objBanco));

        objBanco.Free;
      end;

    except
      result := TJSONArray.Create;
    end;
  finally
    resultSet.Free;
  end;

end;

end.
