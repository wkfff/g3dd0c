unit UsuarioController;

interface

uses
  Classes, SQLExpr, SysUtils, Generics.Collections, Controller, DBXJSON,
  DBXCommon, Usuario,DSService;
type
  TUsuarioController = class(TController<TUsuario>)
  private

  public

    //function Serializar(usuario:TUsuario):TJsonObject;
    // consultar
    function Usuarios(pFiltro: String; pPagina: Integer): TJSONArray;
    // inserir
    function AcceptUsuarios(pObjeto: TJSONValue): TJSONArray;
    // alterar
    function UpdateUsuarios(pObjeto: TJSONValue): TJSONArray;
    // excluir
    function CancelUsuarios(pId: Integer): Boolean;

    function Autenticar(usuario,senha: String): Boolean;
  end;

implementation

uses JSonVO, ORM, DBConnection, SA, ServerContainer;

var
  objBanco: TUsuario;

  { TUsuarioController }

function TUsuarioController.AcceptUsuarios(pObjeto: TJSONValue): TJSONArray;
var
  UltimoID: Integer;
begin
result := self.Accept(pObjeto);
{  try
      if (FManager = nil) then
           FManager := TDBConnection.GetInstance.CreateObjectManager;
      objBanco := TJSonVO.JSONToObject<TUsuario>(pObjeto);
      FManager := TDBConnection.GetInstance.CreateObjectManager;
      FManager.SaveOrUpdate(objBanco);
      FManager.Flush;
      result := TJSONArray.Create;
      result.addElement(TJSonVO.ObjectToJson<TUsuario>(ObjBanco));
  finally

  end;}
end;

function TUsuarioController.Autenticar(usuario, senha: String): Boolean;
begin

end;

function TUsuarioController.CancelUsuarios(pId: Integer): Boolean;
Begin
  result := self.Cancel(pId);
end;

function TUsuarioController.Serializar(usuario: TUsuario): TJsonObject;
begin
    //
end;

function TUsuarioController.UpdateUsuarios(pObjeto: TJSONValue): TJSONArray;
{var
  Filtro: String;
  Pagina: Integer;
  Usuario:TUsuario;}
begin
    result := self.UpdateUsuarios(pObjeto);
{  try
    try
      Usuario := TJSonVO.JSONToObject<TUsuario>
        ((pObjeto as TJSONArray).Get(0));

      if not (FManager.IsAttached(Usuario)) then
          FManager.SaveOrUpdate(Usuario);
      FManager.Flush;
      result := Usuarios('ID = ' + IntToStr(Usuario.Id) ,0);
    except
      result := TJSONArray.Create;
    end;
  finally
  end;}
end;

function TUsuarioController.Usuarios(pFiltro: String;
  pPagina: Integer): TJSONArray;
var
  usuario: TUsuario;
  usuariosList: TObjectList<TUsuario>;
  i:integer;
begin
result := self.List(pFiltro,pPagina);
{  try
    try
      Manager := TDBConnection.GetInstance.CreateObjectManager;
      if pFiltro = '1=1' then
        usuariosList := Manager.FindAll<TUsuario>
      else usuariosList := Manager.Find<TUsuario>.Where(TLinq.Sql(pFiltro)).List;
      result := TJSONArray.Create;
      for i := 0 to UsuariosList.Count - 1 do
        Begin
          result.AddElement(TJSonVO.ObjectToJSON<TUsuario>(UsuariosList.Items[i]));
        end;
    except
      result := TJSONArray.Create;
    end;
  finally
    usuariosList.Free;
    Manager.Free;
  end;}
end;

end.
